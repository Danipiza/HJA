
public class main {

	static String entrada = "AhKdQcTh9h";
	
	// COLOR 
	public static void color(char[] entradaChar) {
		int cont1 = 1, cont2 = 0;	
		char contC1 = entradaChar[1], contC2 = ' ';
		
		int i = 0, j = 3;
		boolean fin = false;		
		while(i != 4 && !fin) { 
			// RECORRE LA LISTA, 2 CONTADORES PARA SABER SI HAY COLOR O PUEDE HABER
			if(entradaChar[j] == contC1) ++cont1;
			else if(cont2 == 0)  {
				contC2 = entradaChar[j];
				++cont2;
			}
			else if(contC2 == entradaChar[j]) ++cont2;			
			else fin = true;
			
			if(cont1 == cont2 && cont1== 2) fin = true;			
			j+=2;
			++i;
		}
		
		if(cont1 == 4 || cont2 == 4) System.out.println("Draw");
		else if(cont1 == 5) System.out.println("Flush");
		
	}
	
	// POKER FUll HOUSE TRIO DOBLE PAREJA PAREJA CARTA ALTA
	public static void P_FH_T_DP_P(char[] entradaChar) {
		int cont1 = 1, cont2 = 0, cont3 = 0, cont4 = 0;
		char contC1 = entradaChar[0], contC2 = ' ', contC3 = ' ', contC4 = ' ';
		int i = 0, j = 2;
		
		boolean poker = false, fullHouse = false, trio = false, doublePair = false, pair = false;
		// PARA GUARDAR LAS CARTAS DE LA COMBINACION
		// char pokerC = ' ', fullHouseC = ' ', trioC = ' ', doublePairC = ' ', pairC = ' ';
		char max = contC1;
		
		boolean fin = false;		
		while(i != 4 && !fin) {	
			
			if(entradaChar[j] == contC1) {
				++cont1;
				if(cont1 == 4) {
					poker = true;
					trio = false;
				}
				else if(cont1 == 3) {
					trio = true;
					pair = false;
				}
				else if(cont1 == 2) {
					if(pair) doublePair = true;
					else pair = true;
				}	
			}
			else if(entradaChar[j] == contC2) {
				++cont2;
				if(cont2 == 4) {
					poker = true;
					trio = false;
				}
				else if(cont2 == 3) {
					trio = true;
					pair = false;
				}
				else if(cont2 == 2) {
					if(pair) doublePair = true;
					else pair = true;
				}	
			}
			else if(entradaChar[j] == contC3) {
				++cont3;
				if(cont3 == 4) {
					poker = true;
					trio = false;
				}
				else if(cont3 == 3) {
					trio = true;
					pair = false;
				}
				else if(cont3 == 2) {
					if(pair) doublePair = true;
					else pair = true;
				}	
			}
			else if(entradaChar[j] == contC4) {
				++cont4;
				if(cont4 == 4) {
					poker = true;
					trio = false;
				}
				else if(cont4 == 3) {
					trio = true;
					pair = false;
				}
				else if(cont4 == 2) {
					if(pair) doublePair = true;
					else pair = true;
				}	
			}
			else if(cont2 == 0)  {
				contC2 = entradaChar[j];
				if (contC2 > max) max = contC2;								
				++cont2;
			}
			else if(cont3 == 0)  {
				contC3 = entradaChar[j];
				if (contC3 > max) max = contC3;
				++cont3;
			}
			else if(cont4 == 0)  {
				contC4 = entradaChar[j];
				if (contC4 > max) max = contC4;
				++cont4;
			}	
			
			
			j+=2;
			++i;
		}
		
		if(pair && trio) fullHouse = true;
		
		// BEST HAND:
		if(poker) System.out.println("Poker");
		else if(fullHouse) System.out.println("Full House");
		else if(trio) System.out.println("Trio");
		else if(doublePair) System.out.println("Double Pair");
		else if(pair) System.out.println("Pair");
		else System.out.println("High Card");
		
		// DRAW:
		if(trio) System.out.println("Draw, Poker");
		else if(trio || doublePair) System.out.println("Draw, Full House");
		else if(pair) {
			System.out.println("Draw, Trio");	
			System.out.println("Draw, Double Pair");
		}
		else if(!pair && !poker) System.out.println("Draw, Pair");
		
		
	}
	
	// ESCALERA REAL, COLOR, NORMAL
	public static void straigth(char[] entradaChar) {
		
		char contC1 = entradaChar[0];
		
		int i = 0, j = 2;
		boolean fin = false;		
		while(i != 4 && !fin) { 
			
			
			
			j+=2;
			++i;
		}
		
	}
	
	public static void main(String[] args) {			
		
		char[] entradaChar = entrada.toCharArray();
				
		//color(entradaChar);
		//P_FH_T_DP_P(entradaChar);	
		
		// ESCALERA
		
		/*while(i != 5) {
			
			while ((carta[i].elem == carta[i+1].elem + 1  && i < list.size() - 1) ||
					(carta[i].elem == carta[i+1].elem + 2 ))		
				if(carta[i].elem == carta[i+1].elem + 1  && i < list.size() - 1)) draw = false;
			}
		}*/
			
		

	}

}
